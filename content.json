{"posts":[{"title":"Apifox","text":"记录一下使用Apifox时的一些配置和脚本。 设置网络代理Apifox默认不使用网络代理，需要在应用内自行设置。 脚本在请求头中加入请求时间123var currentDate = (new Date()).toUTCString();pm.request.headers.add({ key: &quot;Timestamp&quot;, value: currentDate});","link":"/2024/01/28/Apifox/"},{"title":"GIL(Global Interpreter Lock)","text":"1 什么是GIL？GIL是CPython引入的一个概念。GIL是Python解释器（特别是Cpython实现）中用来协调线程执行的机制。它保证在任何时候只有一个线程可以执行Python字节码，从而避免了多个线程同时操作Python对象时出现的数据竞争问题。 GIL并不是Python的特性，Python完全可以不依赖于GIL。 2 GIL的由来与作用在Python中，内存管理器并不是线程安全的。GIL是为了简化Python解释器的实现，特别是CPython中内存管理的线程安全问题。通过GIL，CPython避免了需要在每一个数据结构访问时加锁的开销，这使得开发和维护Python解释器更为容易，但这也导致了多线程在Python中的性能问题。 3 GIL的工作机制 单一线程执行：GIL的存在使得在多线程的环境下，同一时刻只有一个线程可以运行Python代码，其他线程必须等待当前线程释放GIL后才能继续运行。这意味着即使在多核CPU上，Python的多线程程序也不能真正并行地执行Python字节码。 周期性释放GIL：为了避免长时间占用GIL，Python会在每个线程执行一段时间后强制释放GIL，让其他线程有机会执行。这段时间称为时间片，默认情况下，CPython会在每隔一定数量的字节码指令（如100个字节码指令）之后释放GIL，允许其他线程获得执行机会。 I/O操作释放GIL：当某个线程在执行I/O操作（如文件读写、网络请求等）时，Python会自动释放GIL，这允许其他线程在等待I/O完成的同时继续执行。这也是为什么Python多线程适用于I/O密集型任务，而不适用于CPU密集型任务的原因。 4 GIL的影响 对多线程并行的限制 由于GIL的存在，Python中的多线程程序在处理CPU密集型任务时不能真正并行执行。即使在多核CPU上，Python解释器也只能让一个线程在某个时刻运行，从而限制了程序的并行性能。 示例：如果你有一个四核CPU，并且你的Python程序启动了4个线程用于处理大量计算任务，由于GIL的存在，程序无法利用这四个核心同时运行，而是一个核心接着一个核心轮流执行线程，导致并行计算的效率大大降低。 对I/O密集型任务的影响 GIL对I/O密集型任务的影响较小，因为I/O操作会触发GIL的释放，让其他线程在等待I/O操作完成时可以继续执行。多线程可以有效地处理大量网络请求、文件读取等任务。 示例：如果你的Python程序启动了多个线程用于处理网络请求（如爬虫），在发出请求时，GIL会被释放，其他线程可以继续执行，因而能更好地利用多线程提高性能。 Python中由于GIL的存在，在多线程时并没有真正的进行多线程计算。GIL说白了就是伪多线程，一个线程运行时其他线程阻塞，使得多线程代码不是同时执行，而是交替执行。 多线程可能反而会更慢，原因可以参考pcode数量的调度方式。 5 GIL的解决方案和优化GIL多线程的不足，其实是对计算密集型的不足，这个解决可以利用多进程进行解决，而对于IO密集型任务，还是可以使用多线程进行提升效率。 使用多进程代替多进程 由于每个进程都有自己独立的GIL，使用multiprocessing模块可以绕过GIL限制，从而在多核CPU上实现真正的并行计算。 12345678910111213from multiprocessing import Processdef cpu_intensive_task(): # 执行大量 CPU 密集型任务 passif __name__ == '__main__': p1 = Process(target=cpu_intensive_task) p2 = Process(target=cpu_intensive_task) p1.start() p2.start() p1.join() p2.join() 使用C扩展或Cython Python的C扩展模块在执行计算密集型任务时，可以暂时释放GIL，允许其他线程运行。这对于某些高性能计算场景很有帮助。 Cython时一种允许开发者编写接近Python语法的C代码的工具，可以编译为C代码并绕过GIL。 Jython和IronPython 非阻塞I/O和异步编程 6 资料 Global Interpreter Lock(全局解释器锁)","link":"/2024/10/17/GIL-Global-Interpreter-Lock/"},{"title":"JWT简介","text":"什么是 JSON Web Token?JSON Web Token(JWT)是一种开放标准(RFC 7519)，他定义了一种紧凑且独立的方式，用于在各方之间以JSON对象的形式安全地传输信息。该信息可以被验证和信任，因为它是经过数字签名的。JWT可以使用密钥（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。 尽管JWT可以加密以在各方之间提供保密性，但我们将重点关注签名令牌。签名令牌可以验证其中包含的声明的完整性，而加密令牌则向其他方隐藏这些声明。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。 什么使用应该使用 JSON Web Token？以下是JSON Web Token有用的一些场景： 认证：这是使用JWT最常见的场景。用户登录后，每个后续请求都将包含JWT，从而允许用户访问该令牌允许的路由、服务和资源。`单点登录`是当今广泛使用JWT的一项功能，因为它的开销很小并且能够轻松地跨不同域使用。 信息交换：JSON Web Token是在各方之间安全传输信息的好方法。因为JWT可以进行签名（例如，使用公钥/私钥对），所以您可以确定发送者就是他们所说的人。此外，由于签名是使用header和payload计算的，因此您还可以验证内容是否被篡改。 JSON Web Token结构是什么？在其紧凑形式中，JSON Web Token由用点（.）分割的三个部分组成，它们是： Header Payload Signature 因此，JWT通常看起来像这样：xxxx.yyyy.zzzz 让我们来看一看每一部分。 Headerheader通常由两部分组成：令牌的类型（JWT）和所使用的签名算法（例如HMAC SHA256或RSA）。 例如 1234{ &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;} 然后，对该JSON进行BaseUrl编码以形成JWT的第一部分。 Payloadtoken的第二部分是payload，其中包含声明（claims）。声明是关于实体（通常是用户）和附加数据的声明。声明分为三种类型：注册声明、公共声明和私人声明。 注册声明：这些是一组预定义的声明，不是强制性的，而是推荐的，以提供一组有用的、可互操作的声明。其中一些是：iss（发行者）、exp（到期时间）、sub（主题）、aud（受众）等。 公共声明：这些可以由使用JWT的人随意定义。但为了避免冲突，它们应该在IANA JSON Web Token Registry中定义，或者定义为包含放冲突命名空间的URI。 私人声明：这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，既不是注册声明也不是公开声明。 请注意，声明名称只有三个字符长，因为JWT旨在紧凑。 有效的payload可以是： 12345{ &quot;sub&quot;: &quot;12345&quot;, &quot;name&quot;: &quot;Rey&quot;, &quot;admin&quot;: true} 然后对payload进行Base64Url编码以形成JSON Web Token的第二部分。 请注意，对于签名令牌，此信息虽然受到防止篡改的保护，但是任何人都可以读取。除非加密，否则请勿将蜜柑信息放入JWT的payload或header中。 Signature要创建签名部分，您必须获取编码的header、编码的payload、密钥、header中指定的算法，然后对其进行签名。 例如，如果要使用HMAC SHA256算法，则将通过以下方式创建签名： 12345HMACSHA256( base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret) 签名用于验证消息在传输过程中没有发生更改，并且在使用私钥签名的令牌的情况下，它还可以验证JWT的发送者是否是其所说的人。 将所有内容放在一起输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递，同时与基于XML的标准（例如SAML）相比更加紧凑。 下面显示了一个JWT，它具有先前的header和payload编码，并且使用密钥进行签名。 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c 如果您想使用JWT并将这些概念付诸实践，您可以使用 jwt.io Debugger来解码、验证和生成JWT。 JSON Web Token如何工作？在身份验证中，当用户使用其凭据成功登录时，将返回 JSON Web Token。由于token是凭证因此必须非常小心地防止安全问题。一般来说，您保留token的时间不应超过所需时间。 由于缺乏安全性，您也不应该将敏感会话数据存储在浏览器存储中。 每当用户想要访问受保护的路由或资源时，用户应该发送JWT，通常使用Bearer模式在header中的Authorization中发送。header的内容应如下所示： 1Authorization: Bearer &lt;token&gt; 在某些情况下，这可以是无状态授权机制。服务器的受保护路由将检查Authorization标头中是否存在有效的JWT，如果存在，则将允许用于访问受保护的资源。如果JWT包含必要的数据，则可能会减少查询数据库以执行某些操作的需要，尽管情况可能并非总是如此。 请注意，如果您通过HTTP标头发送JWT令牌，则应尽量防止它们变得太大。某些服务器不接受超过8KB的标头。如果您尝试在JWT令牌中嵌入太多信息（例如包含所有用户的权限），您可能需要替代解决方案，例如 Auth0 Fine-Grained Authorization。 如果令牌在Authorization标头中发送，跨域资源共享将不会成为问题，因为它不使用 cookie。 下图展示了如何获取JWT并用于访问API或资源： 应用程序或客户端向服务器请求授权。这是通过不同的授权流程之一执行的。例如典型的OpenID Connect兼容Web应用程序将使用 authorization code flow 通过/oauth/authorize端点。 收于授权后，授权服务器将访问令牌返回给应用程序。 应用程序使用访问令牌来访问受保护的资源（例如API）。 请注意，使用签名令牌时，令牌中包含的所有信息都会向用户或其他方公开，即使它们无法更改它。这意味着您不应将敏感信息放入令牌中。 为什么我们应该使用JSON Web Token？我们来谈谈 JSON Web Tokens(JWT) 与 Simple Web Tokens(SWT) 和 Security Assertion Markup Language Tokens(SAML) 相比的优势。 由于JSON比XML更简洁，因此在编码时其大小也更小，使得JWT比SAML更紧凑。这使得JWT成为在HTML和HTTP环境中传递的不错选择。 从安全角度来看，SWT只能使用HMAC算法通过共享密钥进行对称签名。但是，JWT和SAML令牌可以使用 X.509 证书形式的公钥/私钥对进行签名。与简单签名相比，使用XML数字签名对XML进行签名而不引入安全漏洞是非常困难的。 关于使用，JWT 用于互联网规模。这凸显了在多个平台（尤其是移动平台）上客户端处理 JSON Web Token 的简便性。 编码的JWT和编码的SAML的长度比较 参考链接 Introduction to JSON Web Tokens","link":"/2024/01/31/JWT%E7%AE%80%E4%BB%8B/"},{"title":"mac python3安装mysqlclient错误","text":"开发时使用mac python3安装mysqlclient时发生错误，特此记录。 解决12brew install opensslexport LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/ 报错信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&gt; pip install mysqlclientCollecting mysqlclient Using cached https://files.pythonhosted.org/packages/ec/fd/83329b9d3e14f7344d1cb31f128e6dbba70c5975c9e57896815dbb1988ad/mysqlclient-1.3.13.tar.gzBuilding wheels for collected packages: mysqlclient Running setup.py bdist_wheel for mysqlclient ... error Complete output from command /Users/lixiang/projects/py3/bin/python3 -u -c &quot;import setuptools, tokenize;__file__='/private/var/folders/62/hgjxw8x902346sf1zkbv0tyc0000gn/T/pip-install-cg1t5xfv/mysqlclient/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))&quot; bdist_wheel -d /private/var/folders/62/hgjxw8x902346sf1zkbv0tyc0000gn/T/pip-wheel-4k0re98e --python-tag cp36: running bdist_wheel running build running build_py creating build creating build/lib.macosx-10.9-x86_64-3.6 copying _mysql_exceptions.py -&gt; build/lib.macosx-10.9-x86_64-3.6 creating build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/compat.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/connections.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/converters.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/cursors.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/release.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/times.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb creating build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/CLIENT.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/CR.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/ER.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/FIELD_TYPE.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/FLAG.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/REFRESH.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants running build_ext building '_mysql' extension creating build/temp.macosx-10.9-x86_64-3.6 gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Dversion_info=(1,3,13,'final',0) -D__version__=1.3.13 -I/usr/local/Cellar/mysql/8.0.12/include/mysql -I/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m -c _mysql.c -o build/temp.macosx-10.9-x86_64-3.6/_mysql.o gcc -bundle -undefined dynamic_lookup -arch x86_64 -g build/temp.macosx-10.9-x86_64-3.6/_mysql.o -L/usr/local/Cellar/mysql/8.0.12/lib -lmysqlclient -lssl -lcrypto -o build/lib.macosx-10.9-x86_64-3.6/_mysql.cpython-36m-darwin.so ld: library not found for -lssl clang: error: linker command failed with exit code 1 (use -v to see invocation) error: command 'gcc' failed with exit status 1 ---------------------------------------- Failed building wheel for mysqlclient Running setup.py clean for mysqlclient Failed to build mysqlclient Installing collected packages: mysqlclient Running setup.py install for mysqlclient ... error Complete output from command /Users/lixiang/projects/py3/bin/python3 -u -c &quot;import setuptools, tokenize;__file__='/private/var/folders/62/hgjxw8x902346sf1zkbv0tyc0000gn/T/pip-install-cg1t5xfv/mysqlclient/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))&quot; install --record /private/var/folders/62/hgjxw8x902346sf1zkbv0tyc0000gn/T/pip-record-z495c9l8/install-record.txt --single-version-externally-managed --compile --install-headers /Users/lixiang/projects/py3/bin/../include/site/python3.6/mysqlclient: running install running build running build_py creating build creating build/lib.macosx-10.9-x86_64-3.6 copying _mysql_exceptions.py -&gt; build/lib.macosx-10.9-x86_64-3.6 creating build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/compat.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/connections.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/converters.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/cursors.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/release.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb copying MySQLdb/times.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb creating build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/CLIENT.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/CR.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/ER.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/FIELD_TYPE.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/FLAG.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants copying MySQLdb/constants/REFRESH.py -&gt; build/lib.macosx-10.9-x86_64-3.6/MySQLdb/constants running build_ext building '_mysql' extension creating build/temp.macosx-10.9-x86_64-3.6 gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Dversion_info=(1,3,13,'final',0) -D__version__=1.3.13 -I/usr/local/Cellar/mysql/8.0.12/include/mysql -I/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m -c _mysql.c -o build/temp.macosx-10.9-x86_64-3.6/_mysql.o gcc -bundle -undefined dynamic_lookup -arch x86_64 -g build/temp.macosx-10.9-x86_64-3.6/_mysql.o -L/usr/local/Cellar/mysql/8.0.12/lib -lmysqlclient -lssl -lcrypto -o build/lib.macosx-10.9-x86_64-3.6/_mysql.cpython-36m-darwin.so ld: library not found for -lssl # 主要信息在这里 clang: error: linker command failed with exit code 1 (use -v to see invocation) error: command 'gcc' failed with exit status 1","link":"/2024/01/26/mac-python3%E5%AE%89%E8%A3%85mysqlclient%E9%94%99%E8%AF%AF/"},{"title":"chrome快捷键","text":"说明 快捷键 关闭当前标签页 cmd + w","link":"/2024/02/14/chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"npm-registry","text":"因为npm默认的源是外网，所以很慢。国内的同学如果想要快速下载，需要配置国内镜像源。 源123https://registry.npmjs.org/ # officialhttps://mirrors.aliyun.com/pypi/simple/ # ali 临时使用1npm install 包名 -i 源地址 永久使用1npm config set registry 源地址 获取当前源1npm config get registry","link":"/2024/01/27/npm-registry/"},{"title":"pip-registry","text":"python pip默认的源因为是外网，所以很慢。如果想要快速下载，需要配置国内镜像源。 源1https://mirrors.aliyun.com/pypi/simple/ # ali 临时使用1pip install 包名 -i 源地址 永久使用1pip config set global.index-url 源地址","link":"/2024/01/26/pip-registry/"},{"title":"pyenv-virtualenv","text":"想要在pc上同时使用多版本的python，pyenv-virtualenv可以满足你的需求。 查看当前python版本 1pyenv version 使用当前版本创建环境 1pyenv virtualenv &lt;name&gt; 列出所有虚拟环境 1pyenv virtualenvs 激活环境 1pyenv activate &lt;name&gt; 退出环境 1pyenv deactivate 删除环境 1pyenv uninstall &lt;name&gt;","link":"/2024/01/27/pyenv-virtualenv/"},{"title":"Mac快捷键","text":"说明 快捷键 显示隐藏文件 cmd + shift + . spotlight搜索 cmd + 空格 退出应用程序 cmd + q 隐藏应用程序 cmd + h 最小化应用程序 cmd + m 截屏 shift + cmd + 5 查看预览 选择文件，然后按空格","link":"/2024/02/01/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"在TypeScript中使用dotenv","text":"环境1234node = v21.6.2npm = 8.6.0dotenv = 16.4.5ts-node = 10.9.1 安装包1npm install dotenv 创建环境变量文件12# vim .envENVIRONMENT = dev 创建TypeScript文件1234567// vim app.tsimport dotenv from &quot;dotenv&quot;;dotenv.config();const environment: any = process.env.ENVIRONMENT;console.log(&quot;environment:&quot;, environment);","link":"/2024/09/09/%E5%9C%A8TypeScript%E4%B8%AD%E4%BD%BF%E7%94%A8dotenv/"},{"title":"导入aioredis报错TimeoutError","text":"环境 python=3.12.3 aioredis=2.0.1 错误1234567891011121314Traceback (most recent call last): File &quot;main.py&quot;, line 22, in &lt;module&gt; from core.events import create_start_app_handler, create_stop_app_handler File &quot;core/events.py&quot;, line 8, in &lt;module&gt; import aioredis File &quot;venv/lib/python3.12/site-packages/aioredis/__init__.py&quot;, line 1, in &lt;module&gt; from aioredis.client import Redis, StrictRedis File &quot;venv/lib/python3.12/site-packages/aioredis/client.py&quot;, line 32, in &lt;module&gt; from aioredis.connection import ( File &quot;venv/lib/python3.12/site-packages/aioredis/connection.py&quot;, line 33, in &lt;module&gt; from .exceptions import ( File &quot;venv/lib/python3.12/site-packages/aioredis/exceptions.py&quot;, line 14, in &lt;module&gt; class TimeoutError(asyncio.TimeoutError, builtins.TimeoutError, RedisError):TypeError: duplicate base class TimeoutError 解决修改源文件`aioredis/exceptions.py 123456# class TimeoutError(asyncio.TimeoutError, builtins.TimeoutError, RedisError):# pass# 删除asyncio.TimeoutErrorclass TimeoutError(builtins.TimeoutError, RedisError): pass","link":"/2024/09/17/%E5%AF%BC%E5%85%A5aioredis%E6%8A%A5%E9%94%99TimeoutError/"},{"title":"virtualenvwrapper","text":"python虚拟环境管理工具 基本命令12345mkvirtualenv test --python=python3lsvirtualenvworkon testdeactivatermvirtualenv test","link":"/2024/01/26/virtualenvwrapper/"},{"title":"切换git配置","text":"开发人员可能有多个github账号，每次输入命令手动切换比较麻烦，分享一个脚本用于切换全局git配置。 代码示例: 运行: 1./switch_git.sh &lt;name1&gt;","link":"/2024/02/19/%E5%88%87%E6%8D%A2git%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"apifox","slug":"apifox","link":"/tags/apifox/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"gil","slug":"gil","link":"/tags/gil/"},{"name":"jwt","slug":"jwt","link":"/tags/jwt/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"mysqlclient","slug":"mysqlclient","link":"/tags/mysqlclient/"},{"name":"pc","slug":"pc","link":"/tags/pc/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"registry","slug":"registry","link":"/tags/registry/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"pyenv","slug":"pyenv","link":"/tags/pyenv/"},{"name":"virtualenv","slug":"virtualenv","link":"/tags/virtualenv/"},{"name":"dotenv","slug":"dotenv","link":"/tags/dotenv/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"virtualenvwrapper","slug":"virtualenvwrapper","link":"/tags/virtualenvwrapper/"},{"name":"git","slug":"git","link":"/tags/git/"}],"categories":[{"name":"apifox","slug":"apifox","link":"/categories/apifox/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"http","slug":"http","link":"/categories/http/"},{"name":"chrome","slug":"chrome","link":"/categories/chrome/"},{"name":"npm","slug":"npm","link":"/categories/npm/"},{"name":"pc","slug":"pc","link":"/categories/pc/"},{"name":"typescript","slug":"typescript","link":"/categories/typescript/"},{"name":"git","slug":"git","link":"/categories/git/"}],"pages":[]}